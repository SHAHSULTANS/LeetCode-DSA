class Solution:
    def isCycle(self, V, edges):
        adjacent_list = [[] for _ in range(V)]
        for edge in edges:
            adjacent_list[edge[0]].append(edge[1])
            
        # print(adjacent_list)    
            
        visited=[0]*V   
        # print(visited)
        self.hascycle=False
        
        def dfs(node):
            # print(visited)
            if visited[node]==1:
                # print("cycle")
                self.hascycle=True
                return
            
            # print(visited[node]," node ",node)
            
            visited[node]=1
            
            for neighbour in adjacent_list[node]:
                # print("parent: ",node," neighbor", neighbour)
                # if visited[neighbour]==0:
                dfs(neighbour)
            
            # print(node)
            visited[node]=2
            
        for node in range(V):
            if visited[node]==0:
                dfs(node)
                
        
        return self.hascycle
            
 
 
 
 
 
#Efficient Solution, Early return if cycle exists.        
class Solution:
    def isCycle(self, V, edges):
        adjacent_list = [[] for _ in range(V)]
        for u, v in edges:
            adjacent_list[u].append(v)

        visited = [0] * V  # 0 = unvisited, 1 = visiting, 2 = visited

        def dfs(node):
            visited[node] = 1
            for neighbour in adjacent_list[node]:
                if visited[neighbour] == 1:
                    return True  # found a back edge (cycle)
                if visited[neighbour] == 0:
                    if dfs(neighbour):
                        return True
            visited[node] = 2
            return False

        for node in range(V):
            if visited[node] == 0:
                if dfs(node):  # ‚úÖ early exit on cycle
                    return True
        return False



# ‚úÖ Directed Graph Cycle Detection ‡¶è‡¶∞ ‡¶∞‡¶ø‡ßü‡ßá‡¶≤ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶≤‡ßç‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡¶∏‡¶Æ‡ßÇ‡¶π (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü):

# ‡ßß. Course Prerequisite Validation (Topological Sort):
#    ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞‡¶ü‡¶ø‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡ßü (cycle),
#    ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶á ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü ‚Äî ‡¶è ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá cycle detection ‡¶¶‡¶ø‡ßü‡ßá validate ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

# ‡ß®. Deadlock Detection in Operating Systems:
#    ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ì ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ dependency ‡¶ó‡ßÅ‡¶≤‡ßã Directed Graph ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡•§
#    ‡¶Ø‡¶¶‡¶ø cycle ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá deadlock ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚Äî system ‡¶π‡ßç‡¶Ø‡¶æ‡¶Ç ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

# ‡ß©. Build Systems (Makefile / CI pipelines):
#    ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡¶∏‡ßç‡¶™‡¶∞‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá cycle detect ‡¶ï‡¶∞‡ßá circular dependency ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

# ‡ß™. Version Control Systems (e.g., Git):
#    Merge operation ‡¶¨‡¶æ commit graph traversal-‡¶è directed acyclic structure ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

# ‡ß´. Package Dependency Management (npm, pip):
#    ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø‡¶ì ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶ü‡¶ø‡¶§‡ßá ‚Äî ‡¶§‡¶ñ‡¶® cycle detect ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

# ‡ß¨. Workflow Engines / Task Scheduling Systems:
#    Directed Graph-‡¶è ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã ‡¶•‡¶æ‡¶ï‡ßá; cyclic dependency ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§

# ‡ß≠. Compiler Design (Symbol Dependency Analysis):
#    ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡¶æ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶°‡¶ø‡¶™‡ßá‡¶®‡ßç‡¶°‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶æ‡¶á‡¶∏‡¶ø‡¶∏‡ßá cycle ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø error ‡¶ß‡¶∞‡¶æ ‡¶π‡ßü‡•§

# ‡ßÆ. Circuit Design & Analysis:
#    Logic gate ‡¶¨‡¶æ data flow-‡¶è feedback loops (cycles) ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü detect ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

# üîÅ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá: ‡¶ï‡ßã‡¶®‡ßã system ‡¶¨‡¶æ process ‡¶Ø‡¶¶‡¶ø Directed dependency follow ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá cycle detection ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡•§
