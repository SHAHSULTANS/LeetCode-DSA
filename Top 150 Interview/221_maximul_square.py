
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        row=len(matrix)
        col=len(matrix[0])
        
        lengthofsquare=0
        
        ans=[[0]*col for _ in range(row)]
        
        #first row sam
        for i in range(col):
            ans[0][i]=int(matrix[0][i])
            lengthofsquare=max(ans,ans[0][i])
         
        #first column 
        for i in range(row):
            ans[i][0]=int(matrix[i][0])
            lengthofsquare=max(ans,ans[i][0])
            
            
        for i in range(1,row):
            for j in range(1,col):
                if matrix[i][j]=="1":
                    if matrix[i-1][j]=='1' and matrix[i][j-1]=='1' and matrix[i-1][j-1]=='1':
                        ans[i][j]=1+min(ans[i-1][j],ans[i][j-1],ans[i-1][j-1])
                    else:
                        ans[i][j]=1
                        
                lengthofsquare=max(ans,ans[i][j])
                
                        
                        
        return lengthofsquare*2        
    
    
    
# ===============================================
# ЁЯУМ Maximal Square рж╕ржорж╕рзНржпрж╛рж░ ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржкрзНрж░рзЯрзЛржЧ:
# ===============================================

# ЁЯПе рзз. ржорзЗржбрж┐ржХрзЗрж▓ ржЗржорзЗржЬ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ:
# MRI ржмрж╛ CT рж╕рзНржХрзНржпрж╛ржирзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржХрзНрж░ржорж┐ржд ржЕржЮрзНржЪрж▓ (ржпрзЗржЦрж╛ржирзЗ "1") рж╢ржирж╛ржХрзНржд ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред
# рж╕рж╛рж░рзНржЬрж╛рж░рж┐рж░ ржЖржЧрзЗ ржЯрж┐ржЙржорж╛рж░рзЗрж░ ржЖржХрж╛рж░ ржирж┐рж░рзНржзрж╛рж░ржгрзЗ рж╕рж╣рж╛рзЯржХред

# ЁЯЧ║ рзи. рж╕рзНржпрж╛ржЯрзЗрж▓рж╛ржЗржЯ ржЗржорзЗржЬ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:
# ржорзНржпрж╛ржкрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржкрж╛ржирж┐ ржмрж╛ ржлрж╛ржБржХрж╛ ржЕржЮрзНржЪрж▓ рж╢ржирж╛ржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯ (ржпрзЗржЦрж╛ржирзЗ "1" ржорж╛ржирзЗ ржкрж╛ржирж┐ ржмрж╛ ржЦрж╛рж▓рж┐ ржЬрж╛рзЯржЧрж╛)ред

# ЁЯПЧ рзй. ржХржирж╕рзНржЯрзНрж░рж╛ржХрж╢ржи ржбрж┐ржЬрж╛ржЗржи:
# ржкрзНрж▓рзНржпрж╛ржи ржЕржирзБржпрж╛рзЯрзА ржХрзЛржерж╛рзЯ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕рзНржХрзЯрж╛рж░ ржЬрж╛рзЯржЧрж╛ ржлрж╛ржБржХрж╛ ржЖржЫрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржгрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯтАФржпрзЗржоржи ржмрзЬ рж░рзБржо ржмрж╛ ржмрзЗржЬржорзЗржирзНржЯрзЗрж░ рж╕рзНржерж╛ржиред

# ЁЯзм рзк. ржЬрзЗржирзЗржЯрж┐ржХ ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:
# DNA ржорзНржпрж╛ржЯрзНрж░рж┐ржХрзНрж╕рзЗ рж░рж┐ржкрж┐ржЯрж┐ржВ ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗрж░ ржоржзрзНржпрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕рзНржХрзЯрж╛рж░ ржЕржЮрзНржЪрж▓ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

# ЁЯУК рзл. рж╕рзНржкрзНрж░рзЗржбрж╢рж┐ржЯ ржЕрзНржпрж╛ржирж╛рж▓рж╛ржЗрж╕рж┐рж╕:
# ржбрзЗржЯрж╛ ржЯрзЗржмрж┐рж▓рзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржЕржнрж┐ржирзНржи ржорж╛ржи (ржпрзЗржоржи "1") ржмрж┐рж╢рж┐рж╖рзНржЯ рж╕рзНржХрзЯрж╛рж░ ржЕржВрж╢ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗ,
# ржпрж╛ ржкрж░ржмрж░рзНрждрзА ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржмрж╛ рж░рж┐ржкрзЛрж░рзНржЯрж┐ржВрзЯрзЗрж░ ржЬржирзНржп ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред

# ===============================================
 
    
        