# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        
        values_index_inorder={value:index for index,value in enumerate(inorder)}
        # print(values_index_inorder)
        self.preindex=0
        
        def fun(i,j):
            if i>j:
                return None
            
            #find the mid index from inorder tree
            mid=values_index_inorder[preorder[self.preindex]]
            # print("i j",i," ",j, " mid ",mid, " preindex ",self.preindex)
            
            root=TreeNode(inorder[mid]) 
            self.preindex+=1
            
            root.left=fun(i,mid-1)
            root.right=fun(mid+1,j)
            
            return root
        
        
        
        
        
        
# ЁЯУМ ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржмрзНржпржмрж╣рж╛рж░ (Real-World Application):

# ржзрж░рзЛ, рждрзБржорж┐ ржПржХржЯрж┐ Web Browser рждрзИрж░рж┐ ржХрж░ржЫрзЛ ржмрж╛ ржПржХржЯрж┐ HTML/XML Parser рж▓рж┐ржЦржЫрзЛред
# ржПржХржЯрж┐ HTML ржлрж╛ржЗрж▓ рж╣рж▓рзЛ ржПржХ ржзрж░ржирзЗрж░ Tree structure (DOM Tree).
# ржПржЗ Tree ржЧржаржирзЗрж░ рж╕ржорзЯ ржпржжрж┐ ржЖржорж░рж╛ DOM-ржПрж░ Preorder ржПржмржВ Inorder traversal рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж┐,
# рждрж╛рж╣рж▓рзЗ рж╕рзЗржЗ ржЯрзНрж░рж┐ ржкрзБржирж░рзНржЧржаржи ржХрж░рж╛ рж╕ржорзНржнржм рж╣рзЯред
# ржЙржжрж╛рж╣рж░ржгрж╕рзНржмрж░рзВржк, ржПржХржЯрж┐ HTML ржирзЛржбрзЗрж░ tree structure ржирж┐ржорзНржирж░рзВржк рж╣рждрзЗ ржкрж╛рж░рзЗ:

# <body>
#   <div>
#     <p>Hello</p>
#   </div>
#   <span>World</span>
# </body>

# ржПржЗржЯрж╛ржХрзЗ ржпржжрж┐ ржЖржорж░рж╛ preorder ржПржмржВ inorder traversal ржЖржХрж╛рж░рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж┐, 
# рждрж╛рж╣рж▓рзЗ ржЖржорж░рж╛ ржкрж░ржмрж░рзНрждрзАрждрзЗ XML parser ржжрж┐рзЯрзЗ рж╕рзЗржЗ ржЯрзНрж░рж┐ reconstruct ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

# тЬФя╕П ржПржЫрж╛рзЬрж╛ржУ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ:
# 1. Compiler design-ржП syntax tree reconstruct ржХрж░рждрзЗ
# 2. Database replication ржмрж╛ recovery рждрзЗ ржЯрзНрж░рж┐ structure reconstruct ржХрж░рждрзЗ
# 3. Game development-ржП behavior tree ржмрж╛ scene graph reconstruct ржХрж░рждрзЗ
# 4. Network protocol analyzer-ржП packet dependency tree reconstruct ржХрж░рждрзЗ

# тЬЕ ржПржЗ ржХрж╛рж░ржгрзЗ preorder ржПржмржВ inorder рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ржЯрж╛ ржЕржирзЗржХ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг тАФ ржХрж╛рж░ржг pointer ржмрж╛ memory reference 
# ржЖржорж░рж╛ disk-ржП рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ ржкрж╛рж░рж┐ ржирж╛, ржХрж┐ржирзНрждрзБ traversal list рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ ржЧржаржи ржкрзБржирж░рзБржжрзНржзрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
