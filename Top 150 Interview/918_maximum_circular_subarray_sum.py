class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        max_sum = nums[0]
        current_sum = 0

        for item in nums:
            current_sum=max(item,current_sum+item)
            max_sum=max(max_sum,current_sum)

        # return max_sum
        min_sum=nums[0]
        current_sum=0
        # print(max_sum)

        for item in nums:
            current_sum=min(item,current_sum+item)
            min_sum=min(min_sum,current_sum)
        
        total=sum(nums)
        if total-min_sum==0:
            return max_sum

        return max(max_sum,(total-min_sum))

# ЁЯУМ LeetCode 918 - Maximum Sum Circular Subarray
# ЁЯОп ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржирж╕ржорзВрж╣ (Real-World Applications in Bangla)

# тЬЕ рзз. ЁЯФЛ Battery Usage Optimization (Smartwatch, Smartphone)
# ржЙржжрж╛рж╣рж░ржг: charge_log = [3, -2, 5, -4, 2, -1]
# Positive ржорж╛ржирзЗ charge, Negative ржорж╛ржирзЗ drain
# Circular ржзрж░рж╛рж░ ржХрж╛рж░ржг: рж░рж╛ржд ржерзЗржХрзЗ рж╕ржХрж╛рж▓ ржкрж░рзНржпржирзНржд usage pattern detect ржХрж░рждрзЗ рж╣рзЯ
# ржмрзНржпржмрж╣рж╛рж░:
# - Sleep mode optimization
# - Smart charging suggestion
# - Battery drain hotspot analysis

# тЬЕ рзи. ЁЯПн Conveyor Belt Load Monitoring
# ржЙржжрж╛рж╣рж░ржг: belt_load = [5, -6, 3, -2, 4]
# Factory рждрзЗ belt ржШрзБрж░рзЗ ржлрж┐рж░рзЗ ржЖрж╕рзЗ, рждрж╛ржЗ circular consideration ржжрж░ржХрж╛рж░
# ржмрзНржпржмрж╣рж╛рж░:
# - Most efficient segment ржЦрзБржБржЬрзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ
# - Predictive maintenance
# - Load balancing

# тЬЕ рзй. ЁЯЫ░я╕П Satellite Signal Strength Optimization
# ржЙржжрж╛рж╣рж░ржг: signal_strength = [-1, 3, -2, 4, -3, 2]
# Satellite ржкрзГржерж┐ржмрзАржХрзЗ ржПржХржмрж╛рж░ ржШрзБрж░рзЗ ржЖрж╕рзЗ тЖТ circular orbit ржзрж░рзЗ
# ржмрзНржпржмрж╣рж╛рж░:
# - Best signal window ржЦрзБржБржЬрзЗ transmission ржХрж░рж╛
# - Dead zone ржПржбрж╝рж╛ржирзЛ
# - Transmission success rate ржмрж╛рзЬрж╛ржирзЛ

# тЬЕ рзк. ЁЯОо Game Engine Frame Heat Detection
# ржЙржжрж╛рж╣рж░ржг: frame_heat = [20, -10, 30, -5, -25, 40]
# Game engine ржП frame rendering ржПржХржЯрж┐ cyclic (circular) loop ржП ржЪрж▓рзЗ
# ржмрзНржпржмрж╣рж╛рж░:
# - Frame drop ржмрж╛ heat buildup detect ржХрж░рж╛
# - Lag prediction
# - Frame scheduling optimization

# тЬЕ рзл. ЁЯУИ Stock Market Cross-day Trend Detection
# ржЙржжрж╛рж╣рж░ржг: stock_movement = [-2, 3, -1, 4, -3, 5, -2]
# Market ржЧржд ржПржХ рж╕ржкрзНрждрж╛рж╣рзЗрж░ data circular ржзрж░рзЗ: рж╢рзБржХрзНрж░ржмрж╛рж░ ржмрж┐ржХрзЗрж▓рзЗ ржХрж┐ржирзЗ рж╕рзЛржоржмрж╛рж░ рж╕ржХрж╛рж▓рзЗ ржмрж┐ржХрзНрж░рж┐
# ржмрзНржпржмрж╣рж╛рж░:
# - Highest profit window ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
# - Buy/sell suggestion
# - Automated trading strategy design

# ЁЯФБ ржХрзЗржи Circular ржзрж░рждрзЗ рж╣рзЯ:
# - Data рж╢рзЗрж╖ рж╣рзЯрзЗ ржЖржмрж╛рж░ рж╢рзБрж░рзБ рж╣рзЯ (Day тЖТ Night тЖТ Day)
# - Real-world systems often work in loops (24hr, weekly, orbital, etc.)
# - рж╢рзБржзрзБржорж╛рждрзНрж░ KadaneтАЩs algorithm ржжрж┐рж▓рзЗ circular edge cases ржорж┐рж╕ рж╣рзЯ

# тЬЕ ржпржжрж┐ ржПржЗ logic ржирж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ:
# - Battery usage misinterpreted рж╣ржмрзЗ
# - Factory belt overload detect рж╣ржмрзЗ ржирж╛
# - Satellite signal drop рж╣рждрзЗ ржкрж╛рж░рзЗ
# - Game frame overheating рж╣ржмрзЗ
# - Stock trade window miss рж╣ржмрзЗ

# тЬЕ ржПржЗ ржкрзНрж░ржмрж▓рзЗржоржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ:
# - Circular system-ржП performance hotspot ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ ржпрж╛рзЯ
# - AI optimization logic implement ржХрж░рж╛ ржпрж╛рзЯ
# - Automated prediction ржУ scheduling рж╕рж┐рж╕рзНржЯрзЗржо ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯ
