class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        ans=[]
        n=len(nums)
        def dfs(ar):
            if len(ar)==n:
                ans.append(ar)
                return
            
            for item in nums:
                if ar.count(item)==0:
                    cp=ar.copy()
                    cp.append(item)
                    dfs(cp)
                
        
        dfs([])
        return ans
    

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        ans=[]
        n=len(nums)
        visited=[False]*n
        def dfs(ar):
            if len(ar)==n:
                ans.append(ar.copy())
                return
            
            for i in range(n):
                item=nums[i]
                if visited[i]==False:
                    visited[i]=True
                    ar.append(item)
                    dfs(ar)
                    ar.pop()
                    visited[i]=False
                
        
        dfs([])
        return ans




# тЬЕ ржкрж╛рж░ржорзБржЯрзЗрж╢ржирзЗрж░ рж░рж┐рзЯрзЗрж▓ ржУрзЯрж╛рж░рзНрж▓рзНржб ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржирж╕ржорзВрж╣ (ржмрж╛ржВрж▓рж╛рзЯ):

# рзз. Scheduling ржмрж╛ Task Assignment:
#    ржЙржжрж╛рж╣рж░ржг: рзкржЯрж┐ ржХрж╛ржЬ рзкржЬржи ржХрж░рзНржорзАрж░ ржоржзрзНржпрзЗ ржХрждржнрж╛ржмрзЗ ржнрж╛ржЧ ржХрж░рж╛ ржпрж╛рзЯ тЖТ ржкрж╛рж░ржорзБржЯрзЗрж╢ржи

# рзи. Password Cracking ржмрж╛ Brute Force:
#    рж╕ржорзНржнрж╛ржмрзНржп рж╕ржм ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржХржорзНржмрж┐ржирзЗрж╢ржи ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛рж░ рж╕ржорзЯ permutation ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ

# рзй. Puzzle ржмрж╛ Game Solver:
#    ржпрзЗржоржи: Sudoku, tile puzzle, word jumble тАФ рж╕ржм рж╕ржорзНржнрж╛ржмрзНржп configuration ржЪрзЗржХ ржХрж░рждрзЗ рж╣рзЯ

# рзк. Anagram Generator:
#    ржПржХржЯрж┐ рж╢ржмрзНржжрзЗрж░ рж╕ржм ржнрж┐ржирзНржи arrangement рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯ

# рзл. Small Scale Optimization Problems:
#    ржпрзЗржоржи: Traveling Salesman Problem (TSP) тАФ рж╕ржм path permutation evaluate ржХрж░рж╛ рж╣рзЯ

# рзм. Cryptography:
#    Key generation, encodingтАУржП ржмрж┐ржнрж┐ржирзНржи bit/character arrangement ржжрж░ржХрж╛рж░ рж╣рзЯ

# рзн. Test Case Generation:
#    Automation-ржП рж╕ржм input ordering/permutation ржЪрзЗржХ ржХрж░рж╛ рж╣рзЯ bugs ржзрж░рж╛рж░ ржЬржирзНржп

# рзо. Seating Arrangements:
#    ржХрждржнрж╛ржмрзЗ рзк ржЬржи ржорж╛ржирзБрж╖ржХрзЗ рзкржЯрж┐ ржЪрзЗрзЯрж╛рж░рзЗ ржмрж╕рж╛ржирзЛ ржпрж╛рзЯ тАФ ржкрж╛рж░ржорзБржЯрзЗрж╢ржи

# рзп. Robotics Path Planning:
#    ржмрж┐ржнрж┐ржирзНржи ржХрж╛ржЬрзЗрж░ order ржирж┐рж░рзНржзрж╛рж░ржгрзЗ permutation ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ

# ЁЯФБ рж╕ржмржЧрзБрж▓рзЛржЗ ржмрж╛рж╕рзНрждржмрзЗ ржирж╛ржирж╛ рж░ржХржо ржбрзЗржЯрж╛ ржЕрж░рзНржбрж╛рж░рж┐ржВ ржПржмржВ optimization ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрж╛ржЬрзЗ рж▓рж╛ржЧрзЗред
