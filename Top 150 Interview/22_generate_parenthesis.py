class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans=[]
        
        def dfs(s,row,col):
            if row==n and col==n:
                ans.append(s)
                return
            
            
            #call opening bracket
            if row<n:
                dfs(s+"(",row+1,col)
             
            #call closing bracket 
            if col<n and col<row:
                dfs(s+")",row,col+1)   
                
        dfs("",0,0)
        return ans
                
                
# ‚úÖ Real-World Applications of "22. Generate Parentheses"

# üî∏1. Compiler Design (Code Parsing):
# ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶Æ‡ßç‡¶™‡¶æ‡¶á‡¶≤‡¶æ‡¶∞ ‡¶¨‡¶æ interpreter parentheses/check ‡¶ï‡¶∞‡ßá, ‡¶Ø‡ßá‡¶Æ‡¶®:
#   - {}, [], (), nested structure ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
# ‡¶§‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶¨‡¶æ ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§

# üî∏2. Expression Generation:
# Calculator apps ‡¶¨‡¶æ code formatting tools-‡¶è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá expression ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ó‡ßá‡¶≤‡ßá 
# valid parentheses combination ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

# üî∏3. Math Equation Solvers:
# ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶∏‡¶´‡¶ü‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ú‡ßá‡¶¨‡ßç‡¶∞‡¶ø‡¶ï ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: (a+b)*(c-d)) ‡¶§‡ßà‡¶∞‡¶ø ‡¶¨‡¶æ ‡¶∏‡¶≤‡¶≠ ‡¶ï‡¶∞‡ßá, 
# ‡¶∏‡ßá‡¶∏‡¶¨ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü valid parenthesis combinations ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§

# üî∏4. Regex ‡¶¨‡¶æ Pattern Matching Generator:
# ‡¶ï‡ßã‡¶®‡¶ü‡¶æ optional, group, repeated ‚Äî ‡¶è‡¶∏‡¶¨ ‡¶¨‡ßã‡¶ù‡¶æ‡¶§‡ßá regular expressions ‡¶è parentheses ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡•§
# ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ valid combination ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ally ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶è‡¶á algorithm ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§

# üî∏5. XML/HTML Tag Generator:
# ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá open-close ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡¶ï‡ßá match ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü 
# ‡¶Ø‡ßá‡¶Æ‡¶® `<div><p></p></div>` ‚Äî ‡¶è‡¶¶‡ßá‡¶∞ validate ‡¶¨‡¶æ generate ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶Æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶≤‡¶æ‡¶ó‡ßá‡•§

# üî∏6. Code Formatting / Linter Tools:
# Parentheses ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ, ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá nest ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‚Äî
# ‡¶è‡¶∏‡¶¨ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶≤‡¶æ‡¶ó‡ßá‡•§

# üî∏7. Interview Question / Programming Challenge:
# ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ø‡¶ï ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡•§
# ‡¶Æ‡ßÇ‡¶≤‡¶§ tree structure-‡¶è ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø valid path ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

# üß† Summary:
# ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã context-‡¶è ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‚Äî
#   ‚Üí balanced open-close structure ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞
#   ‚Üí ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶¨ valid combination generate ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü
