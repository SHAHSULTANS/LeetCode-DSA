# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
        track_parent={}
        
        def dfs(parent,node,level):
            if not node:
                return
            
            track_parent[node]=(parent,level)
            dfs(node,node.left,level+1)
            dfs(node,node.right,level+1)
            
        
        dfs(None,root,0)
        # print(track_parent)
        
        pa=p
        qa=q
        
        while track_parent[pa][1]>track_parent[qa][1]:
            pa=track_parent[pa][0]
            
        while track_parent[qa][1]>track_parent[pa][1]:
            qa=track_parent[qa][0]
            
            
        while pa!=qa:
            pa=track_parent[pa][0]
            qa=track_parent[qa][0]
        
        return pa
        
            
# üìå LeetCode 236 - Lowest Common Ancestor (LCA) of a Binary Tree ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ (Real-World Applications in Bangla)
# -----------------------------------------------------------------------------------

# ‚úÖ ‡ßß. Family Tree Analysis
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Shanto ‡¶Ü‡¶∞ Rahim ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶®‡¶ø‡¶ï‡¶ü‡¶§‡¶Æ common ancestor ‡¶ï‡ßá?
# Tree = Family Tree
# Node = Person
# LCA = Closest shared ancestor
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Genealogy apps, ancestry research

# ‚úÖ ‡ß®. Filesystem Directory Navigation
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /usr/local/bin/python ‡¶è‡¶¨‡¶Ç /usr/local/lib/python3 ‡¶è‡¶∞ lowest common directory ‡¶ï‡ßã‡¶®‡¶ü‡¶ø?
# Tree = Directory Tree
# Node = File/Folder
# LCA = Common parent folder (/usr/local)
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: File management tools, IDE path resolution

# ‚úÖ ‡ß©. Ontology / Knowledge Graph Querying
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Dog ‡¶è‡¶¨‡¶Ç Cat ‡¶è‡¶∞ common category (Mammal) ‡¶ï‡ßÄ?
# Tree = Taxonomy Tree
# Node = Concept
# LCA = Shared superclass
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Semantic search, AI chatbots, NLP applications

# ‚úÖ ‡ß™. Product Categorization in E-commerce
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Gaming Laptop ‡¶è‡¶¨‡¶Ç Business Laptop ‡¶è‡¶∞ lowest common category ‡¶π‡¶≤‡ßã "Laptops"
# Tree = Product Category Tree
# Node = Product Types
# LCA = Shared category
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Breadcrumb navigation, category filters, recommendations

# ‚úÖ ‡ß´. Network Routing Optimization
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶®‡ßã‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá common router ‡¶¨‡¶æ switch ‡¶ï‡ßã‡¶•‡¶æ‡ßü?
# Tree = Network Topology Tree
# Node = Devices (routers, switches)
# LCA = Closest common router/switch
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Network path planning, load balancing

# ‚úÖ ‡ß¨. Git Version Control (Finding Merge Base)
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø branch ‡¶Æ‡¶ø‡¶∂‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ common commit ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
# Tree = Commit History Graph
# Node = Commit
# LCA = Common ancestor commit (merge base)
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Git merge, conflict resolution

# ‚úÖ ‡ß≠. Game Engine Scene Hierarchy
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø game object ‡¶è‡¶∞ common parent container ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
# Tree = Scene Graph
# Node = Game Object
# LCA = Common container node
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: UI grouping, physics calculation, rendering optimization

# ‚úÖ ‡ßÆ. Organizational Chart Management
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Shanto ‡¶Ü‡¶∞ Tareq ‡¶è‡¶∞ lowest common manager ‡¶ï‡ßá?
# Tree = Organizational Hierarchy Tree
# Node = Employee
# LCA = Common manager
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: HR systems, approval workflows, team management

# -----------------------------------------------------------------------------------
# üö® LCA ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá:
# - Slow queries
# - Incorrect relations
# - Merge conflicts ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶¨‡ßá
# - ‡¶≠‡ßÅ‡¶≤ hierarchy ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶¨‡ßá
# -----------------------------------------------------------------------------------
# ‚úÖ LCA ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ü‡ßÅ‡¶≤ hierarchical ‡¶¨‡¶æ tree-structured ‡¶°‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá common relationships ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá‡•§
