"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        
        random_mapping={}
        
        if head:
            #create new copy head
            newhead=Node(head.val)
            random_mapping[head]=newhead
            
            orginal_head=head
            
            copy_newhead=newhead
            
            #next chainging copy without random
            while orginal_head.next:
                cp=Node(orginal_head.next.val)
                
                #mapping
                random_mapping[orginal_head.next]=cp
                
                copy_newhead.next=cp
                
                orginal_head=orginal_head.next
                copy_newhead=copy_newhead.next
               
            #copy the random
            orginal_head=head
            while orginal_head:
                random_mapping[orginal_head].random=random_mapping.get(orginal_head.random)
                orginal_head=orginal_head.next
            # print(newhead)
            
            return newhead
        
        
        
# -------------------------------------------------------------
# ЁЯУЪ рзз. Versioned Document Cloning (e.g., Google Docs)
# ржЙржжрж╛рж╣рж░ржгржГ рждрзБржорж┐ Google Docs-ржП ржПржХржЯрж┐ document clone ржХрж░ржЫрзЛ:
# - Paragraph ржЧрзБрж▓рзЛ next pointers ржжрж┐рзЯрзЗ ржпрзБржХрзНржд
# - ржХрж┐ржЫрзБ paragraph ржЕржирзНржп paragraph-ржПрж░ reference (citation) ржжрзЗрзЯ тЮд random pointers
# - ржПржЦржи рждрзБржорж┐ ржпржЦржи "Make a copy" ржХрзНрж▓рж┐ржХ ржХрж░рзЛ, рждржЦржи ржкрзБрж░рж╛ document-ржПрж░ deep copy ржжрж░ржХрж╛рж░
# - ржпрж╛рждрзЗ ржорзВрж▓ document ржПрж░ ржЙржкрж░ ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирждрзБржи ржХржкрж┐ржХрзЗ ржкрзНрж░ржнрж╛ржмрж┐ржд ржирж╛ ржХрж░рзЗ

# -------------------------------------------------------------
# ЁЯза рзи. Graph-like Linked Data Structure Copy (e.g., Knowledge Graphs)
# ржЙржжрж╛рж╣рж░ржгржГ Mind-mapping apps ржмрж╛ AI-ржПрж░ knowledge graph system
# - ржкрзНрж░рждрж┐ржЯрж┐ topic node тЮд next = ржкрж░ржмрж░рзНрждрзА topic
# - random = ржЕржирзНржп context-ржПрж░ link (related idea)
# - ржПржЦржи ржпржЦржи рждрзБржорж┐ ржПржХржЯрж┐ ржЕржВрж╢ clone ржХрж░рзЛ (for subgraph processing), рждржЦржи ржкрзБрж░рзЛ deep copy ржжрж░ржХрж╛рж░ including cross-links

# -------------------------------------------------------------
# ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж рзй. Social Network Friend Recommendation System
# ржЙржжрж╛рж╣рж░ржгржГ LinkedIn ржмрж╛ Facebook
# - Each profile = node
# - next = friend suggestion list
# - random = best friend, colleague, or top connection
# - рждрзБржорж┐ ржпржЦржи ржХрзЛржирзЛ user profile-ржПрж░ ржПржХржЯрж┐ ржХржкрж┐ рждрзИрж░рж┐ ржХрж░рзЛ (for analysis), рждржЦржи friend links + special relationships рж╕ржарж┐ржХржнрж╛ржмрзЗ map ржХрж░рждрзЗ рж╣ржмрзЗ

# -------------------------------------------------------------
# ЁЯзм рзк. Bioinformatics тАУ Protein Interaction Modeling
# ржЙржжрж╛рж╣рж░ржгржГ ржкрзНрж░рждрж┐ржЯрж┐ molecule рж╣ржЪрзНржЫрзЗ ржПржХржЯрж┐ node
# - next = linear chain
# - random = cross-molecule bond (e.g., hydrogen bonding)
# - ржпржжрж┐ рждрзБржорж┐ ржПржЗ structure simulation ржПрж░ ржЬржирзНржп copy ржХрж░рждрзЗ ржЪрж╛ржУ, рждрж╛рж╣рж▓рзЗ deep copy ржжрж░ржХрж╛рж░

# -------------------------------------------------------------
# ЁЯТб ржПржЗ рж╕ржорж╕рзНржпрж╛ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ ржпрзЗржЦрж╛ржирзЗ:
# - рж▓рж┐ржВржХржб рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ ржЖржЫрзЗ
# - Cross-reference ржмрж╛ context-linking ржЖржЫрзЗ (random pointer)
# - Original structure ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд рж░рзЗржЦрзЗ ржирждрзБржи "independent but identical" version ржмрж╛ржирж╛рждрзЗ рж╣рзЯ

# тЬЕ рждрж╛ржЗ ржПржЗ ржзрж░ржгрзЗрж░ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржЧрзБрж▓рзЛрждрзЗ ржПржЗ ржХрзЛржб / ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо ржЕржкрж░рж┐рж╣рж╛рж░рзНржп
# -------------------------------------------------------------
