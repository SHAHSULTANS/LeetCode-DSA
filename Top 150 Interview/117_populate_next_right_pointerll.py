"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""




class Solution:
    def connect(self, root: 'Node') -> 'Node':
        
        def get_cousin_node(node):
            while node:
                if node.left:
                    return node.left
                
                if node.right:
                    return node.right
                
                node=node.next
            
            return None
        
        def fun(root):
            if not root:
                return 
            
            if root.left:
                root.left.next=root.right
            
            if root.next:
                cousin_connect=get_cousin_node(root.next)
                if cousin_connect:
                    if root.right:
                        root.right.next=cousin_connect
                    elif root.left:
                        root.left.next=cousin_connect
            
            
            fun(root.right) #At first we traverse right subtree because chain are made of form L->R
            fun(root.left)
         
        fun(root)    
        return root
        
            
            # q.push((0,root))
            
            # hmap={}
            # while q:
            #     d=q.popleft()
            #     level=d[0]
            #     nod=d[1]
                
            #     level_left_node=hmap.get(level)
                
            #     if level_left_node:
            #         level_left_node.next=nod
                    
            #     hmap[level]=nod
            #     if nod.left:
            #         q.append((level+1,nod.left))
                    
            #     if nod.right:
            #         q.append((level+1,nod.right))
                    
        
        
                
# тЬЕ Real-World Application of "Populating Next Right Pointers in Each Node II"

# ЁЯФ╕1. DOM Tree Rendering (Web Browsers):
# ржпржЦржи ржХрзЛржирзЛ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржПржХржЯрж┐ HTML ржмрж╛ XML ржбржХрзБржорзЗржирзНржЯржХрзЗ DOM Tree-рждрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ,
# рждржЦржи ржкрзНрж░рждрж┐ржЯрж┐ node ржПрж░ "next sibling" ржХрзЗ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣рзЯред
# ржПржЗ рж╕ржорж╕рзНржпрж╛ржЯрж┐ ржарж┐ржХ рж╕рзЗрж░ржХржо тАФ ржкрзНрж░рждрж┐ржЯрж┐ DOM node-ржПрж░ ржкрж░ржмрж░рзНрждрзА ржнрж╛ржЗ ржХрзЗ рж╕рзЗржЯ ржХрж░рж╛ред

# ЁЯФ╕2. UI Widget Trees (Mobile/Desktop apps):
# UI rendering systems-ржП ржПржХрж╛ржзрж┐ржХ UI components (widgets) ржПржХржЯрж┐ tree-рждрзЗ ржерж╛ржХрзЗред
# Traversal ржмрж╛ rendering optimization-ржПрж░ ржЬржирзНржп ржкрзНрж░рждрж┐ржЯрж┐ component-ржПрж░ next widget ржХрзЗ ржпрзБржХрзНржд рж░рж╛ржЦрж╛ ржЧрзЗрж▓рзЗ 
# rendering ржжрзНрж░рзБржд рж╣рзЯред

# ЁЯФ╕3. Network Routing Trees:
# ржбрзЗржЯрж╛ ржкрзНржпрж╛ржХрзЗржЯ ржлрзНрж▓рзЛ ржХрж░рж╛рж░ рж╕ржорзЯ network structure ржХржЦржиржУ tree-рж░ ржорждрзЛ рж╣рзЯред
# рждржЦржи ржкрзНрж░рждрж┐ржЯрж┐ node (router/switch)-ржПрж░ "next connected node in same level" ржЬрж╛ржирж▓рзЗ 
# ржжрзНрж░рзБржд ржкрзНржпрж╛ржХрзЗржЯ ржкрж╛ржарж╛ржирзЛ ржпрж╛рзЯред

# ЁЯФ╕4. File System Directory Visualization:
# ржХрзЛржирзЛ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐рж░ ржнрзЗрждрж░рзЗрж░ structure ржХрзЗ visualize ржмрж╛ process ржХрж░рждрзЗ ржЧрж┐рзЯрзЗ 
# ржПржХржЯрж┐ tree structure рждрзИрж░рж┐ рж╣рзЯред рж╕рзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ "same-level next" ржЬрж╛ржирж▓рзЗ 
# traversal efficient рж╣рзЯред

# ЁЯФ╕5. Multiplayer Game Trees:
# ржХрж┐ржЫрзБ multiplayer games (ржпрзЗржоржи strategy games) internal state tracking ржПрж░ ржЬржирзНржп tree structure ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред
# ржПржХржЗ рж▓рзЗржнрзЗрж▓рзЗрж░ рж╕ржХрж▓ player ржмрж╛ move ржПрж░ "next" ржЬрж╛ржирждрзЗ рж╣рж▓рзЗ ржПржЗ ржзрж░ржирзЗрж░ pointer ржжрж░ржХрж╛рж░ рж╣рзЯред

# ЁЯФ╕6. Memory Optimization in Custom Trees:
# ржпржЦржи ржирж┐ржЬрзЗрж░ ржХрзЛржирзЛ custom tree ржмрж╛ржирж┐рзЯрзЗ traversal ржХрж░рждрзЗ рж╣рзЯ (ржпрзЗржоржи: expression trees, AI decision trees),
# рждржЦржи `next` pointers ржпрзЛржЧ ржХрж░рзЗ BFS traversal ржирж╛ ржХрж░рзЗржУ рж▓рзЗржнрзЗрж▓ ржзрж░рзЗ ржПржЧрзЛржирзЛ ржпрж╛рзЯ тАФ ржпрж╛ рж╕ржорзЯ ржмрж╛ржБржЪрж╛рзЯред

# ЁЯза Bottom Line:
# ржПржЯрж┐ ржПржоржи рж╕ржм ржЬрж╛рзЯржЧрж╛рзЯ ржжрж░ржХрж╛рж░ ржпрзЗржЦрж╛ржирзЗ:
# - ржПржХржЯрж┐ tree structure ржЖржЫрзЗ
# - ржПржмржВ "same-level next node" quickly ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛рж░ ржкрзНрж░рзЯрзЛржЬржи
# - BFS traversal costly ржмрж╛ ржЕрждрж┐рж░рж┐ржХрзНржд ржорзЗржорзЛрж░рж┐ ржЦрж░ржЪ рж╕рж╛рж╢рзНрж░рзЯ ржХрж░рждрзЗ ржЪрж╛ржЗ
                
                
                
                
                