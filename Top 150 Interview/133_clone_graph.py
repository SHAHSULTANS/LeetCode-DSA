"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""


from collections import deque


class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        """
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""


from collections import deque


class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        #One pass bfs
        if node:
            node_map={}
            q=deque()
            q.append(node)
            rt=node_map[node]=Node(node.val)

            
            while q:
                # print(q)
                # print("q above")
                font=q.popleft()

                
                for adjacent in font.neighbors:
                    if node_map.get(adjacent) is None:
                        # print("adj ",adjacent.val)
                        q.append(adjacent)
                        node_map[adjacent]=Node(adjacent.val)
                        
                    node_map[font].neighbors.append((node_map[adjacent]))
                    # print(font.val,"----------->adj-->", adjacent.val)
                    # print(node_map[font].neighbors)

            # rt=node_map[node]
            # print(rt)
            return rt



# üìå LeetCode 133 - Clone Graph ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ (Real-World Applications in Bangla)
# ------------------------------------------------------------------------------
# üß† Clone Graph ‡¶Æ‡ßÇ‡¶≤‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá graph ‡¶¨‡¶æ network structure ‡¶ï‡ßá
# ‡¶Æ‡ßÇ‡¶≤ system touch ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶æ‡¶§‡ßá ‡¶π‡ßü‡•§
# ------------------------------------------------------------------------------

# ‚úÖ ‡ßß. Social Network Graph Simulation
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Facebook/LinkedIn-‡¶è‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï‡¶ï‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá friend suggestion engine ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡•§
# ‡¶Æ‡ßÇ‡¶≤ ‡¶ó‡ßç‡¶∞‡¶æ‡¶´ ‡¶®‡¶æ ‡¶¨‡¶¶‡¶≤‡ßá test ‡¶¨‡¶æ model ‡¶ï‡¶∞‡¶§‡ßá clone ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Friend Recommendation
# - Privacy-preserving Graph Analysis
# - Graph AI Training

# ‚úÖ ‡ß®. Multiplayer Game Map Isolation (e.g. PUBG, Free Fire)
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Free Fire-‡¶è ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶á map, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ instance/cloned world
# clone ‡¶õ‡¶æ‡ßú‡¶æ ‡¶è‡¶ï‡¶ú‡¶®‡ßá‡¶∞ action ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ú‡¶®‡ßá‡¶∞ map-‡¶è reflect ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá!
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Custom Room per player
# - Replay system with isolated world
# - AI bot-specific path graph

# ‚úÖ ‡ß©. Workflow / Diagram Editor (e.g. Node-RED, Unreal Blueprints)
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ visual editor-‡¶è flowchart ‡¶¨‡¶æ data pipeline ‡¶¨‡¶æ‡¶®‡¶æ‡ßü‡•§
# ‡¶Ø‡¶ñ‡¶® ‡¶∏‡ßá undo/redo/save ‡¶ï‡¶∞‡ßá, ‡¶§‡¶ñ‡¶® ‡¶Æ‡ßÇ‡¶≤ graph ‡¶ï‡ßá clone ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Undo/Redo implementation
# - Autosave snapshots
# - Version history comparison

# ‚úÖ ‡ß™. Distributed System Testing
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ì ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ dependency ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§
# ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡¶æ‡¶´ ‡¶ï‡ßá clone ‡¶ï‡¶∞‡ßá fail-over simulation ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Fault-tolerant system simulation
# - Safe testing environment
# - Dependency update without side effect

# ‚úÖ ‡ß´. AI Agent Planning
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: AI bot ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡¶æ‡¶´ structure-‡¶è ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï bot ‡¶ï‡ßá isolate ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø clone ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
# clone ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶ï bot-‡¶è‡¶∞ decision ‡¶Ö‡¶®‡ßç‡¶Ø bot ‡¶ï‡ßá affect ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Pathfinding
# - Multi-agent simulation
# - Reinforcement Learning environments

# ‚úÖ ‡ß¨. Knowledge Graph Query Isolation
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶è‡¶ï‡¶ú‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø query ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü (e.g., "Shanto is a developer")
# ‡¶§‡¶ñ‡¶® graph-‡¶è‡¶∞ ‡¶è‡¶ï ‡¶ü‡ßÅ‡¶ï‡¶∞‡ßã ‡¶Ö‡¶Ç‡¶∂ clone ‡¶ï‡¶∞‡ßá query apply ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Æ‡ßÇ‡¶≤ graph corrupt ‡¶®‡¶æ ‡¶π‡ßü‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Temporary context creation
# - Ontology modification
# - Safe Semantic Search

# ‚úÖ ‡ß≠. Replay System in Games
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: PUBG-‡¶è‡¶∞ KillCam ‡¶¨‡¶æ Replay feature ‚Üí ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶™‡ßÅ‡¶∞‡ßã game world clone ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
# clone ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá live ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá conflict ‡¶π‡¶§‡ßã‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Replay review
# - KillCam animation
# - Game analytics

# ‚úÖ ‡ßÆ. Developer Test Environments
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶ó‡ßá‡¶Æ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶®‡¶§‡ßÅ‡¶® bug fix ‡¶¨‡¶æ AI behavior test ‡¶ï‡¶∞‡ßá,
# ‡¶§‡¶ñ‡¶® ‡¶Æ‡ßÇ‡¶≤ game map/graph ‡¶ï‡ßá clone ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá run ‡¶ï‡¶∞‡ßá‡•§
# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
# - Level testing
# - Bug reproduction
# - A/B testing

# ------------------------------------------------------------------------------
# üß® ‡¶Ø‡¶¶‡¶ø clone ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ ‡¶π‡ßü:
# - Shared reference bug ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá
# - Undo/Redo system ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
# - AI agents ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡¶ï‡ßá affect ‡¶ï‡¶∞‡¶¨‡ßá
# - Replay ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá live game corrupt ‡¶π‡¶¨‡ßá
# ------------------------------------------------------------------------------

# ‚úÖ Clone Graph = ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶, isolate ‡¶ï‡¶∞‡¶æ, ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂
# ‚úÖ Clone ‡¶ï‡¶∞‡¶æ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‚Äî test ‡¶ï‡¶∞‡ßã, ‡¶¶‡ßá‡¶ñ‡ßã, ‡¶∂‡ßá‡¶ñ‡ßã ‚Äî ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶∏‡¶≤ ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶®‡¶∑‡ßç‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡ßã üòé
 
 
                
#___________________________Two pass dfs bfs___________________________________________        
        
        
        # return node
        # if node:
        #     node_map={}
        #     visited={}
        #     q=deque()
        #     q.append(node)
        #     node_map[node]=Node(node.val)
            
        #     while q:
        #         # print(q)
        #         # print("q above")
        #         font=q.popleft()
        #         visited[font]=True

                
        #         for adjacent in font.neighbors:
        #             if visited.get(adjacent) is None:
        #                 q.append(adjacent)
        #                 node_map[adjacent]=Node(adjacent.val)
                        
        #             node_map[font].neighbors.append(Node(adjacent.val))
        #             print(font.val)
        #             print(node_map[font].neighbors)
                
        #     rt=(node_map[node])

        #     return rt
                
            
                        
                

        